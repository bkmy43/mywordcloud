# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WordItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, word: str=None, category: str=None, count: int=None):  # noqa: E501
        """WordItem - a model defined in Swagger

        :param word: The word of this WordItem.  # noqa: E501
        :type word: str
        :param category: The category of this WordItem.  # noqa: E501
        :type category: str
        :param count: The count of this WordItem.  # noqa: E501
        :type count: int
        """
        self.swagger_types = {
            'word': str,
            'category': str,
            'count': int
        }

        self.attribute_map = {
            'word': 'word',
            'category': 'category',
            'count': 'count'
        }

        self._word = word
        self._category = category
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'WordItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The word_item of this WordItem.  # noqa: E501
        :rtype: WordItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def word(self) -> str:
        """Gets the word of this WordItem.


        :return: The word of this WordItem.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word: str):
        """Sets the word of this WordItem.


        :param word: The word of this WordItem.
        :type word: str
        """
        if word is None:
            raise ValueError("Invalid value for `word`, must not be `None`")  # noqa: E501

        self._word = word

    @property
    def category(self) -> str:
        """Gets the category of this WordItem.


        :return: The category of this WordItem.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this WordItem.


        :param category: The category of this WordItem.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def count(self) -> int:
        """Gets the count of this WordItem.


        :return: The count of this WordItem.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this WordItem.


        :param count: The count of this WordItem.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501
        if count is not None and count < 0:  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count = count
